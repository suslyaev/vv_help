from django.core.management.base import BaseCommand
from django.db import transaction
from tickets.models import Ticket
from django.db.models import Count


class Command(BaseCommand):
    help = '–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–µ organization –≤ –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        )
        parser.add_argument(
            '--yes',
            action='store_true',
            help='–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        auto_confirm = options['yes']

        self.stdout.write(
            self.style.SUCCESS('üöÄ –°–ö–†–ò–ü–¢ –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ô –í –û–ë–†–ê–©–ï–ù–ò–Ø–•')
        )
        self.stdout.write('=' * 50)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_statistics()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –±–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        tickets_without_org = Ticket.objects.filter(organization__isnull=True)
        total_tickets = tickets_without_org.count()

        if total_tickets == 0:
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —É–∂–µ –∏–º–µ—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é!')
            )
            return

        self.stdout.write(f'üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –±–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {total_tickets}')

        if dry_run:
            self.stdout.write(self.style.WARNING('üîç –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê (--dry-run):'))
            for ticket in tickets_without_org[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                if ticket.client and ticket.client.organization:
                    self.stdout.write(
                        f'‚úÖ #{ticket.id}: {ticket.client.name} ‚Üí {ticket.client.organization.name}'
                    )
                else:
                    self.stdout.write(
                        f'‚è≠Ô∏è  #{ticket.id}: {ticket.client.name if ticket.client else "–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞"} (–Ω–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞)'
                    )
            if total_tickets > 10:
                self.stdout.write(f'... –∏ –µ—â–µ {total_tickets - 10} –æ–±—Ä–∞—â–µ–Ω–∏–π')
            return

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not auto_confirm:
            confirm = input('\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ? (y/N): ').strip().lower()
            if confirm not in ['y', 'yes', '–¥–∞', '–¥']:
                self.stdout.write(
                    self.style.ERROR('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
                )
                return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.fill_organizations()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_statistics()

    def fill_organizations(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–µ organization –≤ –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        
        self.stdout.write('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö...')

        tickets_without_org = Ticket.objects.filter(organization__isnull=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        updated_count = 0
        skipped_count = 0
        errors = []

        with transaction.atomic():
            for ticket in tickets_without_org:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
                    if ticket.client and ticket.client.organization:
                        ticket.organization = ticket.client.organization
                        ticket.save()
                        updated_count += 1

                        if updated_count <= 20:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                            self.stdout.write(
                                f'‚úÖ #{ticket.id}: {ticket.client.name} ‚Üí {ticket.client.organization.name}'
                            )
                        elif updated_count == 21:
                            self.stdout.write('... (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤—ã–≤–æ–¥–∞)')
                            
                    else:
                        skipped_count += 1
                        if skipped_count <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
                            self.stdout.write(
                                f'‚è≠Ô∏è  #{ticket.id}: {ticket.client.name if ticket.client else "–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞"} (–Ω–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞)'
                            )

                except Exception as e:
                    error_msg = f'‚ùå #{ticket.id}: –û—à–∏–±–∫–∞ - {str(e)}'
                    errors.append(error_msg)
                    self.stdout.write(self.style.ERROR(error_msg))

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write('\n' + '=' * 50)
        self.stdout.write('üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write(f'‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {updated_count}')
        self.stdout.write(f'‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {skipped_count}')
        self.stdout.write(f'‚ùå –û—à–∏–±–æ–∫: {len(errors)}')

        if errors:
            self.stdout.write('\nüö® –û–®–ò–ë–ö–ò:')
            for error in errors:
                self.stdout.write(f'   {error}')

        self.stdout.write('\nüéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        remaining_without_org = Ticket.objects.filter(organization__isnull=True).count()
        self.stdout.write(f'üìä –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞—â–µ–Ω–∏–π –±–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {remaining_without_org}')

    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –≤ –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö"""
        
        self.stdout.write('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø–ú:')
        
        total_tickets = Ticket.objects.count()
        tickets_with_org = Ticket.objects.filter(organization__isnull=False).count()
        tickets_without_org = total_tickets - tickets_with_org
        
        self.stdout.write(f'üìã –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {total_tickets}')
        self.stdout.write(f'‚úÖ –° –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π: {tickets_with_org}')
        self.stdout.write(f'‚ùå –ë–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {tickets_without_org}')
        
        # –¢–æ–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º
        top_orgs = (Ticket.objects
                    .filter(organization__isnull=False)
                    .values('organization__name')
                    .annotate(count=Count('id'))
                    .order_by('-count')[:5])
        
        if top_orgs:
            self.stdout.write('\nüèÜ –¢–û–ü-5 –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ô –ü–û –û–ë–†–ê–©–ï–ù–ò–Ø–ú:')
            for org_data in top_orgs:
                self.stdout.write(f'   {org_data["organization__name"]}: {org_data["count"]} –æ–±—Ä–∞—â–µ–Ω–∏–π')
